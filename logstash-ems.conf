input {
  file {
    path           => "/u/rjray/snapmirror_audit"
    type           => "snapmirror_audit"
    start_position => beginning
  }
  #file {
    #path           => "/u/rjray/ems"
    #type           => "ems"
    #start_position => beginning
    #codec          => multiline {
      #pattern => "<LR"
      #negate  => "true"
      #what    => "previous"
    #}
  #}
}

filter {
  mutate {
    strip => "message"
  }

  if [message] =~ /^$/ {
    drop { }
  }

  if [type] == "snapmirror_audit" {
    grok {
      match => [ "message", "(?<logdate>%{DAY} %{MONTH}\s+%{MONTHDAY} %{TIME} %{TZ} %{YEAR})\s+%{GREEDYDATA:rest}" ]
    }

    if [rest] =~ /^CreateSnapshotDest/ {
      grok {
        match        => [ "rest", "%{WORD:command}\[(?<command_time>%{MONTH}\s+%{MONTHDAY} %{TIME})\]:%{UUID:relationship_uuid} Operation-Uuid=%{UUID:operation_uuid} Group=%{WORD:group} Operation-Cookie=%{INT:operation_cookie:int} action=%{WORD:action} source=%{NOTSPACE:source} destination=%{NOTSPACE:destination}" ]
        remove_field => [ "rest" ]
      }
    } else if [rest] =~ /^DelSnapshotOwners/ {
      grok {
        match        => [ "rest", "%{WORD:command}:%{UUID:relationship_uuid} Operation-Uuid=%{UUID:operation_uuid} Group=%{WORD:group} Operation-Cookie=%{INT:operation_cookie:int} action=%{WORD:action} %{GREEDYDATA:text}" ]
        remove_field => [ "rest" ]
      }
    } else if [rest] =~ /^DelayedUpdate/ {
      grok {
        match        => [ "rest", "%{WORD:command}\[(?<command_time>%{MONTH}\s+%{MONTHDAY} %{TIME})\]:%{UUID:relationship_uuid} Operation-Uuid=%{UUID:operation_uuid} Group=%{WORD:group} Operation-Cookie=%{INT:operation_cookie:int} action=%{WORD:action} %{GREEDYDATA:remainder}" ]
        remove_field => [ "rest" ]
      }

      if [action] == "Start" {
        grok {
          match        => [ "remainder", "source=%{NOTSPACE:source} destination=%{NOTSPACE:destination}" ]
          remove_field => [ "remainder" ]
        }
      } else if [action] == "End" {
        grok {
          match        => [ "remainder", "source=%{NOTSPACE:source} destination=%{NOTSPACE:destination} status=%{WORD:status} %{GREEDYDATA:end_data}" ]
          remove_field => [ "remainder" ]
        }

        if [status] == "Success" {
          grok {
            match        => [ "end_data", "bytes_transferred=%{INT:bytes_transferred:int} network_compression_ratio=%{NOTSPACE:network_compression_ratio}" ]
            remove_field => [ "end_data" ]
          }
        } else if [status] == "Failure" {
          grok {
            match        => [ "end_data", "message=%{GREEDYDATA:text}" ]
            remove_field => [ "end_data" ]
          }
        }
      } else if [action] == "Info" {
        mutate {
          add_field    => { "text" => "%{remainder}" }
          remove_field => [ "remainder" ]
        }
      }
    } else if [rest] =~ /^(Dropped|enable)/ {
      drop { }
    } else if [rest] =~ /^(?:Scheduled|Manual|Resumed)Update/ {
      grok {
        match        => [ "rest", "%{WORD:command}\[(?<command_time>%{MONTH}\s+%{MONTHDAY} %{TIME})\]:%{UUID:relationship_uuid} Operation-Uuid=%{UUID:operation_uuid} Group=%{WORD:group} Operation-Cookie=%{INT:operation_cookie:int} action=%{WORD:action} %{GREEDYDATA:remainder}" ]
        remove_field => [ "rest" ]
      }

      if [action] == "Start" {
        grok {
          match        => [ "remainder", "source=%{NOTSPACE:source} destination=%{NOTSPACE:destination}" ]
          remove_field => [ "remainder" ]
        }
      } else if [action] == "End" {
        grok {
          match        => [ "remainder", "source=%{NOTSPACE:source} destination=%{NOTSPACE:destination} status=%{WORD:status} %{GREEDYDATA:end_data}" ]
          remove_field => [ "remainder" ]
        }

        if [status] == "Success" {
          grok {
            match        => [ "end_data", "bytes_transferred=%{INT:bytes_transferred:int} network_compression_ratio=%{NOTSPACE:network_compression_ratio} transfer_desc=%{GREEDYDATA:transfer_desc}" ]
            remove_field => [ "end_data" ]
          }
        } else if [status] == "Failure" {
          grok {
            match        => [ "end_data", "message=%{GREEDYDATA:text}" ]
            remove_field => [ "end_data" ]
          }
        }
      } else if [action] == "Info" {
        mutate {
          add_field    => { "text" => "%{remainder}" }
          remove_field => [ "remainder" ]
        }
      } else if [action] == "Transfer_snapshots" {
        mutate {
          add_field    => { "text" => "%{remainder}" }
          remove_field => [ "remainder" ]
        }
      } else if [action] == "Defer" {
        grok {
          match        => [ "remainder", "source=%{NOTSPACE:source} destination=%{NOTSPACE:destination} status=%{WORD:status} message=%{GREEDYDATA:text}" ]
          remove_field => [ "remainder" ]
        }
      }
    } else if [rest] =~ /^SnapMirrorServiceJob/ {
      grok {
        match        => [ "rest", "%{WORD:command}: \[%{WORD:sub_command}:%{INT:sub_command_id:int}\]%{GREEDYDATA:text}" ]
        remove_field => [ "rest" ]
      }
    } else if [rest] =~ /^Abort/ {
      grok {
        match        => [ "rest", "%{WORD:command}\[(?<command_time>%{MONTH}\s+%{MONTHDAY} %{TIME})\]:%{UUID:relationship_uuid} Operation-Uuid=%{UUID:operation_uuid} Group=%{WORD:group} Operation-Cookie=%{INT:operation_cookie:int} action=%{WORD:action} %{GREEDYDATA:remainder}" ]
        remove_field => [ "rest" ]
      }

      if [action] == "Start" {
        grok {
          match        => [ "remainder", "source=%{NOTSPACE:source} destination=%{NOTSPACE:destination}" ]
          remove_field => [ "remainder" ]
        }
      } else if [action] == "End" {
        grok {
          match        => [ "remainder", "source=%{NOTSPACE:source} destination=%{NOTSPACE:destination} status=%{WORD:status}" ]
          remove_field => [ "remainder" ]
        }
      }
    }

    date {
      match => [ "logdate", "EEE MMM d HH:mm:ss zzz YYYY" ]
    }
  } else if [type] == "ems" {
    mutate {
      gsub => [ "message", "&x1;", "" ]
    }

    xml {
      source => "message"
      target => "xml"
    }
  }
}

output {
  elasticsearch { host => localhost }
  stdout { codec => rubydebug }
}
